name: cicd for exhibition-service
on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  IMAGE_NAME: esthete-exhibition-service

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Determine and Push Next Version Tag
        run: |
          if ! git tag --sort version:refname | grep -q .; then
            git tag 1.0.0
          else
            NEXT_EXHIBITION_VER=$(git tag --sort version:refname | tail -n 1 | awk -F. -v OFS=. '{$NF++; print}')
            git tag $NEXT_EXHIBITION_VER
          fi
          git push --tags
          echo "NEXT_EXHIBITION_VER=$NEXT_EXHIBITION_VER" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_EXHIBITION_VER }}
          platforms: linux/arm64

      - name: Deploy to test server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_TEST_DNS }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA,NEXT_EXHIBITION_VER
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_EXHIBITION_VER }}
            sudo docker stop ${{ env.IMAGE_NAME }} || true
            sudo docker rm ${{ env.IMAGE_NAME }} || true
            sudo docker run -d --name ${{ env.IMAGE_NAME }} -p 8030:8030 \
                -e DB_HOST='${{ secrets.DB_HOST }}' \
                -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
                -e DB_PORT='${{ secrets.DB_PORT }}' \
                -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
                -e INITIAL_DB='${{ secrets.INITIAL_DB }}' \
                -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
                -e S3_ACCESS_KEY='${{ secrets.S3_ACCESS_KEY }}' \
                -e S3_SECRET_KEY='${{ secrets.S3_SECRET_KEY }}' \
                -e S3_BUCKET_NAME='${{ secrets.S3_BUCKET_NAME }}' \
                -e SPRING_DATASOURCE_DDL_AUTO='${{ secrets.SPRING_DATASOURCE_DDL_AUTO }}' \
                ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_EXHIBITION_VER }}
            sudo docker image prune -af